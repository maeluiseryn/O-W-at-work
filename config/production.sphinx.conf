indexer
{
}

searchd
{
  listen = 127.0.0.1:9312
  log = /home/maeluiseryn/RubymineProjects/pre-install-ow/O-W-at-work/log/searchd.log
  query_log = /home/maeluiseryn/RubymineProjects/pre-install-ow/O-W-at-work/log/searchd.query.log
  pid_file = /home/maeluiseryn/RubymineProjects/pre-install-ow/O-W-at-work/log/searchd.production.pid
}

source address_core_0
{
  type = pgsql
  sql_host = localhost
  sql_user = postgres
  sql_pass = maeluiseryn
  sql_db = O-W_production
  sql_query_pre = SET TIME ZONE 'UTC'
  sql_query = SELECT "addresses"."id" * 5 + 0 AS "id" , "addresses"."description" AS "description", "addresses"."street" AS "street", "addresses"."zip" AS "zip", "addresses"."city" AS "city", "addresses"."id" AS "sphinx_internal_id", 3270727197 AS "class_crc", 0 AS "sphinx_deleted", cast(extract(epoch from "addresses"."created_at") as int) AS "created_at", cast(extract(epoch from "addresses"."updated_at") as int) AS "updated_at" FROM "addresses" WHERE ("addresses"."id" >= $start AND "addresses"."id" <= $end) GROUP BY "addresses"."id", "addresses"."description", "addresses"."street", "addresses"."zip", "addresses"."city", "addresses"."id", "addresses"."created_at", "addresses"."updated_at"
  sql_query_range = SELECT COALESCE(MIN("id"), 1::bigint), COALESCE(MAX("id"), 1::bigint) FROM "addresses" 
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = class_crc
  sql_attr_uint = sphinx_deleted
  sql_attr_timestamp = created_at
  sql_attr_timestamp = updated_at
  sql_query_info = SELECT * FROM "addresses" WHERE "id" = (($id - 0) / 5)
}

index address_core
{
  source = address_core_0
  path = /home/maeluiseryn/RubymineProjects/pre-install-ow/O-W-at-work/db/sphinx/production/address_core
  charset_type = utf-8
  min_infix_len = 3
  enable_star = 1
}

index address
{
  type = distributed
  local = address_core
}

source client_core_0
{
  type = pgsql
  sql_host = localhost
  sql_user = postgres
  sql_pass = maeluiseryn
  sql_db = O-W_production
  sql_query_pre = UPDATE "clients" SET "delta" = FALSE WHERE "delta" = TRUE
  sql_query_pre = SET TIME ZONE 'UTC'
  sql_query = SELECT "clients"."id" * 5 + 1 AS "id" , "clients"."name" AS "name", "clients"."surname" AS "surname", "clients"."client_type" AS "client_type", "clients"."id" AS "id", "clients"."id" AS "sphinx_internal_id", 3236430179 AS "class_crc", 0 AS "sphinx_deleted", COALESCE("clients"."name", '') AS "name_sort", COALESCE("clients"."surname", '') AS "surname_sort", COALESCE("clients"."client_type", '') AS "client_type_sort", cast(extract(epoch from "clients"."created_at") as int) AS "created_at", cast(extract(epoch from "clients"."updated_at") as int) AS "updated_at" FROM "clients" WHERE ("clients"."id" >= $start AND "clients"."id" <= $end AND "clients"."delta" = FALSE) GROUP BY "clients"."id", "clients"."name", "clients"."surname", "clients"."client_type", "clients"."id", "clients"."id", "clients"."name", "clients"."surname", "clients"."client_type", "clients"."created_at", "clients"."updated_at"
  sql_query_range = SELECT COALESCE(MIN("id"), 1::bigint), COALESCE(MAX("id"), 1::bigint) FROM "clients" WHERE "clients"."delta" = FALSE
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = class_crc
  sql_attr_uint = sphinx_deleted
  sql_attr_timestamp = created_at
  sql_attr_timestamp = updated_at
  sql_attr_str2ordinal = name_sort
  sql_attr_str2ordinal = surname_sort
  sql_attr_str2ordinal = client_type_sort
  sql_query_info = SELECT * FROM "clients" WHERE "id" = (($id - 1) / 5)
}

index client_core
{
  source = client_core_0
  path = /home/maeluiseryn/RubymineProjects/pre-install-ow/O-W-at-work/db/sphinx/production/client_core
  charset_type = utf-8
  min_infix_len = 3
  enable_star = 1
}

source client_delta_0 : client_core_0
{
  type = pgsql
  sql_host = localhost
  sql_user = postgres
  sql_pass = maeluiseryn
  sql_db = O-W_production
  sql_query_pre = 
  sql_query_pre = SET TIME ZONE 'UTC'
  sql_query = SELECT "clients"."id" * 5 + 1 AS "id" , "clients"."name" AS "name", "clients"."surname" AS "surname", "clients"."client_type" AS "client_type", "clients"."id" AS "id", "clients"."id" AS "sphinx_internal_id", 3236430179 AS "class_crc", 0 AS "sphinx_deleted", COALESCE("clients"."name", '') AS "name_sort", COALESCE("clients"."surname", '') AS "surname_sort", COALESCE("clients"."client_type", '') AS "client_type_sort", cast(extract(epoch from "clients"."created_at") as int) AS "created_at", cast(extract(epoch from "clients"."updated_at") as int) AS "updated_at" FROM "clients" WHERE ("clients"."id" >= $start AND "clients"."id" <= $end AND "clients"."delta" = TRUE) GROUP BY "clients"."id", "clients"."name", "clients"."surname", "clients"."client_type", "clients"."id", "clients"."id", "clients"."name", "clients"."surname", "clients"."client_type", "clients"."created_at", "clients"."updated_at"
  sql_query_range = SELECT COALESCE(MIN("id"), 1::bigint), COALESCE(MAX("id"), 1::bigint) FROM "clients" WHERE "clients"."delta" = TRUE
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = class_crc
  sql_attr_uint = sphinx_deleted
  sql_attr_timestamp = created_at
  sql_attr_timestamp = updated_at
  sql_attr_str2ordinal = name_sort
  sql_attr_str2ordinal = surname_sort
  sql_attr_str2ordinal = client_type_sort
  sql_query_info = SELECT * FROM "clients" WHERE "id" = (($id - 1) / 5)
}

index client_delta : client_core
{
  source = client_delta_0
  path = /home/maeluiseryn/RubymineProjects/pre-install-ow/O-W-at-work/db/sphinx/production/client_delta
}

index client
{
  type = distributed
  local = client_delta
  local = client_core
}

source contact_core_0
{
  type = pgsql
  sql_host = localhost
  sql_user = postgres
  sql_pass = maeluiseryn
  sql_db = O-W_production
  sql_query_pre = SET TIME ZONE 'UTC'
  sql_query = SELECT "contacts"."id" * 5 + 2 AS "id" , "contacts"."description" AS "description", "contacts"."contact_data" AS "contact_data", "contacts"."id" AS "sphinx_internal_id", 2212487076 AS "class_crc", 0 AS "sphinx_deleted", cast(extract(epoch from "contacts"."created_at") as int) AS "created_at", cast(extract(epoch from "contacts"."updated_at") as int) AS "updated_at", COALESCE("contacts"."genre", '') AS "genre" FROM "contacts" WHERE ("contacts"."id" >= $start AND "contacts"."id" <= $end) GROUP BY "contacts"."id", "contacts"."description", "contacts"."contact_data", "contacts"."id", "contacts"."created_at", "contacts"."updated_at", "contacts"."genre"
  sql_query_range = SELECT COALESCE(MIN("id"), 1::bigint), COALESCE(MAX("id"), 1::bigint) FROM "contacts" 
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = class_crc
  sql_attr_uint = sphinx_deleted
  sql_attr_timestamp = created_at
  sql_attr_timestamp = updated_at
  sql_attr_str2ordinal = genre
  sql_query_info = SELECT * FROM "contacts" WHERE "id" = (($id - 2) / 5)
}

index contact_core
{
  source = contact_core_0
  path = /home/maeluiseryn/RubymineProjects/pre-install-ow/O-W-at-work/db/sphinx/production/contact_core
  charset_type = utf-8
  min_infix_len = 3
  enable_star = 1
}

index contact
{
  type = distributed
  local = contact_core
}

source project_core_0
{
  type = pgsql
  sql_host = localhost
  sql_user = postgres
  sql_pass = maeluiseryn
  sql_db = O-W_production
  sql_query_pre = SET TIME ZONE 'UTC'
  sql_query = SELECT "projects"."id" * 5 + 3 AS "id" , "projects"."client_id" AS "client_id", "projects"."project_ref" AS "project_ref", "clients"."surname" AS "client_surname", "clients"."name" AS "client_name", "projects"."id" AS "sphinx_internal_id", 3759073650 AS "class_crc", 0 AS "sphinx_deleted", cast(extract(epoch from "projects"."created_at") as int) AS "created_at", cast(extract(epoch from "projects"."updated_at") as int) AS "updated_at", COALESCE("projects"."project_state", '') AS "project_state" FROM "projects" LEFT OUTER JOIN "clients" ON "clients"."id" = "projects"."client_id" WHERE ("projects"."id" >= $start AND "projects"."id" <= $end) GROUP BY "projects"."id", "projects"."client_id", "projects"."project_ref", "clients"."surname", "clients"."name", "projects"."id", "projects"."created_at", "projects"."updated_at", "projects"."project_state"
  sql_query_range = SELECT COALESCE(MIN("id"), 1::bigint), COALESCE(MAX("id"), 1::bigint) FROM "projects" 
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = class_crc
  sql_attr_uint = sphinx_deleted
  sql_attr_timestamp = created_at
  sql_attr_timestamp = updated_at
  sql_attr_str2ordinal = project_state
  sql_query_info = SELECT * FROM "projects" WHERE "id" = (($id - 3) / 5)
}

index project_core
{
  source = project_core_0
  path = /home/maeluiseryn/RubymineProjects/pre-install-ow/O-W-at-work/db/sphinx/production/project_core
  charset_type = utf-8
  min_infix_len = 3
  enable_star = 1
}

index project
{
  type = distributed
  local = project_core
}

source uploaded_file_core_0
{
  type = pgsql
  sql_host = localhost
  sql_user = postgres
  sql_pass = maeluiseryn
  sql_db = O-W_production
  sql_query_pre = SET TIME ZONE 'UTC'
  sql_query = SELECT "uploaded_files"."id" * 5 + 4 AS "id" , "uploaded_files"."filename" AS "filename", "uploaded_files"."content_type" AS "content_type", "uploaded_files"."id" AS "sphinx_internal_id", 871682702 AS "class_crc", 0 AS "sphinx_deleted", cast(extract(epoch from "uploaded_files"."created_at") as int) AS "created_at", cast(extract(epoch from "uploaded_files"."updated_at") as int) AS "updated_at" FROM "uploaded_files" WHERE ("uploaded_files"."id" >= $start AND "uploaded_files"."id" <= $end) GROUP BY "uploaded_files"."id", "uploaded_files"."filename", "uploaded_files"."content_type", "uploaded_files"."id", "uploaded_files"."created_at", "uploaded_files"."updated_at"
  sql_query_range = SELECT COALESCE(MIN("id"), 1::bigint), COALESCE(MAX("id"), 1::bigint) FROM "uploaded_files" 
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = class_crc
  sql_attr_uint = sphinx_deleted
  sql_attr_timestamp = created_at
  sql_attr_timestamp = updated_at
  sql_query_info = SELECT * FROM "uploaded_files" WHERE "id" = (($id - 4) / 5)
}

index uploaded_file_core
{
  source = uploaded_file_core_0
  path = /home/maeluiseryn/RubymineProjects/pre-install-ow/O-W-at-work/db/sphinx/production/uploaded_file_core
  charset_type = utf-8
  min_infix_len = 3
  enable_star = 1
}

index uploaded_file
{
  type = distributed
  local = uploaded_file_core
}
